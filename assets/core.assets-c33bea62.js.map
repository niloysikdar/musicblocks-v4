{"version":3,"file":"core.assets-c33bea62.js","sources":["../../src/core/assets/loaders.ts","../../src/core/assets/index.ts"],"sourcesContent":["import { TAsset, TAssetType } from '@/@types/core/assets';\n\n/**\n * Stores the loader map.\n * @description A loader transforms the asset data from `base64` if required.\n */\nconst loaders: Partial<Record<TAssetType, (asset: TAsset) => Promise<TAsset>>> = {\n    'image/svg+xml': async (asset: TAsset) => {\n        return fetch(asset.data)\n            .then((res) => res.text())\n            .then((res) => ({ ...asset, data: res }));\n    },\n};\n\nexport default loaders;\n","import { TAsset, TAssetManifest, TAssetType } from '@/@types/core/assets';\n\nimport loaders from './loaders';\n\n// -- private variables ----------------------------------------------------------------------------\n\n/** Stores the asset map. */\nconst _assets: { [identifier: string]: TAsset } = {};\n\n// -- private functions ----------------------------------------------------------------------------\n\n/**\n * Stores an asset into the asset map (after transforming using the loader if present).\n * @param identifier string to uniquely identify the asset\n * @param asset asset item\n */\nasync function _loadAsset(identifier: string, asset: TAsset): Promise<void> {\n    _assets[identifier] =\n        asset.type in loaders ? await loaders[asset.type]!.call(null, asset) : asset;\n}\n\n// -- public functions -----------------------------------------------------------------------------\n\n/**\n * Returns an asset entry.\n * @param identifier asset identifier\n */\nexport function getAsset(identifier: string): TAsset | undefined {\n    return _assets[identifier];\n}\n\n/**\n * Returns map of asset entries corresponding to asset identifiers.\n * @param identifiers list of asset identifiers\n */\nexport function getAssets(identifiers: string[]): { [identifier: string]: TAsset | undefined } {\n    return Object.fromEntries(identifiers.map((identifier) => [identifier, getAsset(identifier)]));\n}\n\n/**\n * Fetches an asset file and loads them into the repository.\n * @param identifier string to uniquely identify the asset\n * @param manifest asset details\n */\nexport async function importAsset(identifier: string, manifest: TAssetManifest): Promise<void> {\n    let { path, meta } = manifest;\n    path = import.meta.env.PROD\n        ? path.replace(new RegExp(`${import.meta.env.BASE_URL}`), '')\n        : path;\n\n    const data = await fetch(path)\n        .then((response) => response.blob())\n        .then((blob) => {\n            return new Promise<string>((resolve, reject) => {\n                try {\n                    const reader = new FileReader();\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.readAsDataURL(blob);\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        });\n\n    await _loadAsset(identifier, {\n        type: data.match(/data:(.+);base64/)![1] as TAssetType,\n        data,\n        meta: meta !== undefined ? meta : {},\n    });\n}\n\n/**\n * Fetches a list of asset files and loads them into the repository.\n * @param items asset items\n * @param callback callback function to call after each asset item is imported\n */\nexport async function importAssets(\n    items: {\n        /** String to uniquely identify the asset. */\n        identifier: string;\n        /** Asset details. */\n        manifest: TAssetManifest;\n    }[],\n    callback?: (assetId: string) => unknown,\n): Promise<void> {\n    await Promise.all(\n        items.map(({ identifier, manifest }) =>\n            importAsset(identifier, manifest).then(() => {\n                if (callback !== undefined) callback(identifier);\n            }),\n        ),\n    );\n}\n"],"names":["loaders","asset","res","_assets","_loadAsset","identifier","getAsset","getAssets","identifiers","importAsset","manifest","path","meta","data","response","blob","resolve","reject","reader","e","importAssets","items","callback"],"mappings":"AAMA,MAAMA,EAA2E,CAC7E,gBAAiB,MAAOC,GACb,MAAMA,EAAM,IAAI,EAClB,KAAMC,GAAQA,EAAI,KAAA,CAAM,EACxB,KAAMA,IAAS,CAAE,GAAGD,EAAO,KAAMC,CAAM,EAAA,CAEpD,ECLMC,EAA4C,CAAA,EASlD,eAAeC,EAAWC,EAAoBJ,EAA8B,CACxEE,EAAQE,CAAU,EACdJ,EAAM,QAAQD,EAAU,MAAMA,EAAQC,EAAM,IAAI,EAAG,KAAK,KAAMA,CAAK,EAAIA,CAC/E,CAQO,SAASK,EAASD,EAAwC,CAC7D,OAAOF,EAAQE,CAAU,CAC7B,CAMO,SAASE,EAAUC,EAAqE,CAC3F,OAAO,OAAO,YAAYA,EAAY,IAAKH,GAAe,CAACA,EAAYC,EAASD,CAAU,CAAC,CAAC,CAAC,CACjG,CAOsB,eAAAI,EAAYJ,EAAoBK,EAAyC,CACvF,GAAA,CAAE,KAAAC,EAAM,KAAAC,CAAS,EAAAF,EACrBC,EACMA,EAAK,QAAQ,IAAI,OAAO,kBAA6B,EAAG,EAAE,EAGhE,MAAME,EAAO,MAAM,MAAMF,CAAI,EACxB,KAAMG,GAAaA,EAAS,KAAM,CAAA,EAClC,KAAMC,GACI,IAAI,QAAgB,CAACC,EAASC,IAAW,CACxC,GAAA,CACM,MAAAC,EAAS,IAAI,WACnBA,EAAO,OAAS,IAAMF,EAAQE,EAAO,MAAgB,EACrDA,EAAO,cAAcH,CAAI,QACpBI,GACLF,EAAOE,CAAC,CACZ,CAAA,CACH,CACJ,EAEL,MAAMf,EAAWC,EAAY,CACzB,KAAMQ,EAAK,MAAM,kBAAkB,EAAG,CAAC,EACvC,KAAAA,EACA,KAAMD,IAAS,OAAYA,EAAO,CAAC,CAAA,CACtC,CACL,CAOsB,eAAAQ,EAClBC,EAMAC,EACa,CACb,MAAM,QAAQ,IACVD,EAAM,IAAI,CAAC,CAAE,WAAAhB,EAAY,SAAAK,KACrBD,EAAYJ,EAAYK,CAAQ,EAAE,KAAK,IAAM,CACrCY,IAAa,QAAWA,EAASjB,CAAU,CAAA,CAClD,CACL,CAAA,CAER"}